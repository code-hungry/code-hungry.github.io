<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC和Struts2的区别？</title>
      <link href="/2019/03/03/%E6%A1%86%E6%9E%B6/SpringMVC%E5%92%8CStruts2%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/03/03/%E6%A1%86%E6%9E%B6/SpringMVC%E5%92%8CStruts2%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="SpringMVC和Struts2对比"><a href="#SpringMVC和Struts2对比" class="headerlink" title="SpringMVC和Struts2对比"></a>SpringMVC和Struts2对比</h4><h6 id="1-拦截级别"><a href="#1-拦截级别" class="headerlink" title="1.拦截级别"></a>1.拦截级别</h6><blockquote><p>Struts2是类级别的拦截，一个类对应一个request上下文。</p><p>SpringMVC是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个URL对应，SpringMVC更容易实现restful url。</p></blockquote><a id="more"></a><h6 id="2-数据独立性"><a href="#2-数据独立性" class="headerlink" title="2.数据独立性"></a>2.数据独立性</h6><blockquote><p>由1中的原因，SpringMVC方法之间基本是独立的，独享request、response数据，请求数据通过参数获得，处理结果通过ModelMap交回给框架，方法之间不共享变量。</p><p>而Struts2搞得有点乱，虽然其方法之间也是独立的，但其所有Action变量是共享的，这不会影响程序运行，但是给编码、读程序带来麻烦，每来一次请求就需要创建一个Action，一个Action对象对应一个request上下文。</p></blockquote><h6 id="3-拦截器机制"><a href="#3-拦截器机制" class="headerlink" title="3.拦截器机制"></a>3.拦截器机制</h6><blockquote><p>拦截器实现机制上，Struts2有自己的interceptor机制，SpringMVC用的是独立的AOP方式，这样导致Struts2配置文件量比SpringMVC大。</p></blockquote><h6 id="4-内存消耗"><a href="#4-内存消耗" class="headerlink" title="4.内存消耗"></a>4.内存消耗</h6><blockquote><p>由于Struts2需要针对每一个request进行封装，把request、session等servlet生命周期变量封装成一个Map，供给每一个Action使用，并保证线程安全，所以还是比较耗费内存。</p></blockquote><h6 id="5-入口不同"><a href="#5-入口不同" class="headerlink" title="5.入口不同"></a>5.入口不同</h6><blockquote><p>SpringMVC的入口是servlet，而Struts是filter（filter和servlet是不同的，<u>以后总结filter与servlet</u>）</p></blockquote><h6 id="6-对Ajax的支持"><a href="#6-对Ajax的支持" class="headerlink" title="6.对Ajax的支持"></a>6.对Ajax的支持</h6><blockquote><p>SpringMVC集成了Ajax，使用起来非常方便，只需要一个注解@ResponseBody就可以实现，然后直接返回响应文本即可(只支持异步调用)。</p><p>Struts2拦截器集成了Ajax，在Action处理时一般必须安装插件或自己写代码集成进去，使用起来相对不方便。</p></blockquote><h6 id="7-设计思想"><a href="#7-设计思想" class="headerlink" title="7.设计思想"></a>7.设计思想</h6><blockquote><p>Struts2更加符合OOP思想，SpringMVC就比较谨慎，在Servlet上扩展。</p></blockquote><h5 id="更多内容看SpringMVC-Struts2。"><a href="#更多内容看SpringMVC-Struts2。" class="headerlink" title="更多内容看SpringMVC,Struts2。"></a>更多内容看<a href="https://xunmi.tk/2019/02/27/%E6%A1%86%E6%9E%B6/SpringMVC/" target="_blank" rel="noopener">SpringMVC</a>,<a href="https://xunmi.tk/2019/03/01/%E6%A1%86%E6%9E%B6/Strtus2/" target="_blank" rel="noopener">Struts2</a>。</h5>]]></content>
      
      
      <categories>
          
          <category> 框架，总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis总结</title>
      <link href="/2019/03/02/%E6%A1%86%E6%9E%B6/Mybatis%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/02/%E6%A1%86%E6%9E%B6/Mybatis%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介:"></a>Mybatis简介:</h4><p>​    Mybatis是ORM半自动持久层框架。原名ibatis,经谷歌收购后改名Mybatis。</p><h4 id="Mybatis的优势和使用场景？"><a href="#Mybatis的优势和使用场景？" class="headerlink" title="Mybatis的优势和使用场景？"></a>Mybatis的优势和使用场景？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决JDBC输入硬编码和输出硬编码问题，将输出结果映射为一个java的对象。</span><br><span class="line">与Hibernate相比可扩张性更高，大多用于大型以及业务复杂的项目中。</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="Mybatis与原生的jdbc做分析"><a href="#Mybatis与原生的jdbc做分析" class="headerlink" title="Mybatis与原生的jdbc做分析:"></a>Mybatis与原生的jdbc做分析:</h4><table><thead><tr><th style="text-align:left">原生jdbc</th><th>mybatis</th></tr></thead><tbody><tr><td style="text-align:left">数据库连接，使用的时候创建，不使用立即释放，浪费数据库服务的资源，影响数据库性能</td><td>使用数据库连接池管理数据库连接</td></tr><tr><td style="text-align:left">SQL语句写在java文件中，存在硬编码问题，如果修改sql文件，导致java文件需要重新编译</td><td>将sql文件存放在XML配置文件中便于维护</td></tr><tr><td style="text-align:left">向sql语句参数复制存在硬编码</td><td>sql语句以及占位符全部配置在XML文件中</td></tr><tr><td style="text-align:left">从result遍历结果集，存在硬编码，不利于系统维护</td><td>将结果集自动映射为java对象</td></tr></tbody></table><h4 id="Mybatis采用mapper代理开发，什么叫映射器动态代理？"><a href="#Mybatis采用mapper代理开发，什么叫映射器动态代理？" class="headerlink" title="Mybatis采用mapper代理开发，什么叫映射器动态代理？"></a>Mybatis采用mapper代理开发，什么叫映射器动态代理？</h4><blockquote><p>采用映射器动态代理方法只需要编写相应的映射器接口（相当于道接口），那么Mybatis的框架根据接口定义创建接口的动态代理对象，代理对象的方法体通道接口实现类方法。</p><p><em>mapper接口开发需要遵循以下规范：</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; Mapper.xml文件中的命名空间与映射器接口的全类名相同</span><br><span class="line">&gt; Mapper接口方法名与Mapper.xml中定义的每个语句的id相同</span><br><span class="line">&gt; Mapper接口方法的输入参数类型和mapper.xml中定义的parameterType的类型相同</span><br><span class="line">&gt; Mapper接口放安防的输出参数类型和Mapper.xml中定义的resultType的类型相同</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="主键返回："><a href="#主键返回：" class="headerlink" title="主键返回："></a>主键返回：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 主键返回 --&gt;</span><br><span class="line">    &lt;insert id=&quot;addUser&quot; parameterType=&quot;user&quot;&gt;</span><br><span class="line">    &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">       select last_insert_id()</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">    insert into user (name,address,age)values(#&#123;name&#125;,#&#123;address&#125;,#&#123;age&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure><h4 id="动态sql：（sql语句可以进行灵活拼接）"><a href="#动态sql：（sql语句可以进行灵活拼接）" class="headerlink" title="动态sql：（sql语句可以进行灵活拼接）"></a>动态sql：（sql语句可以进行灵活拼接）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态Sql 1 --&gt;</span><br><span class="line">     &lt;select id=&quot;findUsersByMap&quot; resultType=&quot;user&quot;&gt;</span><br><span class="line">         select * from user</span><br><span class="line">         &lt;where&gt;</span><br><span class="line">            &lt;if test=&quot;name!=null and name!=&apos;&apos;&quot;&gt;</span><br><span class="line">              and name like &apos;%$&#123;name&#125;%&apos;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;if test=&quot;age!=null&quot;&gt;</span><br><span class="line">              and age&gt;#&#123;age&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">         &lt;/where&gt;</span><br><span class="line">     &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态Sql 2 --&gt;     </span><br><span class="line">     &lt;select id=&quot;findUsersByMap2&quot; resultType=&quot;user&quot;&gt;</span><br><span class="line">     select * from user  </span><br><span class="line">         &lt;where&gt;</span><br><span class="line">         &lt;if test=&quot;list!=null&quot;&gt;</span><br><span class="line">              &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;and id in (&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">                  #&#123;id&#125;</span><br><span class="line">              &lt;/foreach&gt;</span><br><span class="line">          &lt;/if&gt;</span><br><span class="line">         &lt;/where&gt;</span><br><span class="line">     &lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--动态Sql 3 --&gt;   </span><br><span class="line">&lt;if test=&quot;_parameter!=null&quot;&gt;&lt;if/&gt;  用于当参数时基本数据类型的判断，而不是一个bean的属性。</span><br></pre></td></tr></table></figure><h4 id="Mybatis的缓存机制："><a href="#Mybatis的缓存机制：" class="headerlink" title="Mybatis的缓存机制："></a>Mybatis的缓存机制：</h4><blockquote><p>一级缓存：不能关闭，作用于一个SQLSession</p><p>二级缓存：可以开启和关闭，作用于同一个映射</p><p>注：通过增删改（提交时）会质控缓存区域</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS分布式文件系统</title>
      <link href="/2019/03/01/%E6%9C%8D%E5%8A%A1%E5%99%A8/FastDFS/"/>
      <url>/2019/03/01/%E6%9C%8D%E5%8A%A1%E5%99%A8/FastDFS/</url>
      
        <content type="html"><![CDATA[<p>介绍：</p><blockquote><p>FastDFS是用C语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、           线性扩容等级制，注重高可用性、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供上传、瞎子啊等服务。</p></blockquote><a id="more"></a><p>FastFDs架构：</p><blockquote><p>FastDFS架构包括Trackerserver和Storage server。客户端请求Tracker server进行文件文件上传、下载，通过Storage server调度最终由Storage server完成文件上传、下载。<br>Tracker server作用是负载均衡和调度，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务，可以将tracker称为追踪服务器或调度服务器。<br>Strong server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将Storage称为存储服务器。<br><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551512251/FastDFS.png" alt="FastDFS"></p></blockquote><p>服务器端两个角色：</p><blockquote><p>Tracker：管理集群，tracker也可以实现集群。每个tracker节点地位平等。收集Storage集群的状态。<br>Storage：实际保存文件。Storage分为多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从的概念。<br>文件上传的流程：<br><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551512308/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%B5%81%E7%A8%8B.png" alt="文件上传流程"><br>总结：<br>客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。<br>文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。<br><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551512251/%E7%BB%84%E5%90%8D.png" alt="组名"><br>组名：文件上传后所在的storage组名称，在文件上传成功后由Storage服务器返回，需要客户端自行保存<br>虚拟磁盘路径：Storage配置的虚拟路径，与从磁盘选项store_path*对应。如果配置了store_path0则是M00,如果配置了store_path1则是M01,以此类推。<br>数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储文件。<br>文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</p></blockquote><p>FastDFS与传统保存图片的方式比较</p><blockquote><p>传统的上传保存图片的方式，只适合并发量小，用户少的情况，如果一旦次服务器宕机，保存的图片就全部销毁了。有很大的危险性。使用FastDFS不管那个服务器接收到图片，都会把图片上传到图片服务器，极大的降低了丢失文件的风险。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate+Mybatis</title>
      <link href="/2019/03/01/%E6%A1%86%E6%9E%B6/Hibernate%E5%92%8Cmybatis/"/>
      <url>/2019/03/01/%E6%A1%86%E6%9E%B6/Hibernate%E5%92%8Cmybatis/</url>
      
        <content type="html"><![CDATA[<h6 id="Hibernate和Mybatis区别"><a href="#Hibernate和Mybatis区别" class="headerlink" title="Hibernate和Mybatis区别:"></a>Hibernate和Mybatis区别:</h6><blockquote><p>Hibernate和Mybatis同为ORM( Object Reational Mapping){对象关系映射}持久层框架，前者是全自动ORM框架，后者是半自动ORM框架。两者各有利弊，都有各自的应用的场景。</p><p>Hibernate封装严实，导致扩展性较于Mybatis弱，而Mybatis由编程人员写SQL语句，可扩展性高，但需要编程人员有一定的SQL语句基础。</p><p>如果要使hibernate发挥优良的性能，需要编程人员掌握一定优化hibernate的性能知识。</p><p>使用场景：hibernate使用中小型项目，Mybatis则较多应用于大型或者业务比较复杂的大型项目。</p></blockquote><a id="more"></a><h6 id="Hibernate的三种查询方式："><a href="#Hibernate的三种查询方式：" class="headerlink" title="Hibernate的三种查询方式："></a>Hibernate的三种查询方式：</h6><p>1.Query方式（依靠hql语句查询）</p><p>2.QBC方式（主要依靠Criteria对象和Restriction对象）</p><p>3.SqlQuery方式（可使用sql语句又能使用hal语句）</p><p>总结：</p><p>(1)</p><ul><li>单个结果集用uniqueResult()</li><li>多个结果集使用list()</li></ul><p>(2)</p><ul><li>setFirstResult()。第几行开始</li><li>setmaxResults()。展示几行</li></ul><h6 id="get和load查询及区别："><a href="#get和load查询及区别：" class="headerlink" title="get和load查询及区别："></a>get和load查询及区别：</h6><blockquote><p>1.get得到的是真正的对象，load的到的是代理对象（继承实体类，所以实体类不能别final修饰）</p><p>2.如果数据库没有该对象，get返回的是null，load会报异常</p><p>3.get立即加载，load延迟加载，即在真正使用对象的时候加载</p><blockquote><p>让load实现立即加载的方式：</p><p>实体类使用final修饰，或者在副配置文件中配置lazy=“false”（默认开启延迟加载）</p></blockquote></blockquote><h6 id="hibernate的缓存机制："><a href="#hibernate的缓存机制：" class="headerlink" title="hibernate的缓存机制："></a>hibernate的缓存机制：</h6><blockquote><p>1.一级缓存（在session中）</p><blockquote><p>着重于一级缓存中的缓存与快照的原理：</p><blockquote><p>缓存作用：用于提高查询效率</p><p>快照作用：用于更新数据，做对比使用</p><font color="red">快照的支持就是持久态对象直接可以通过修改对象属性更新数据库中的数据，不需要使用update方法</font></blockquote><p>快照的工作流程：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; &gt; hibernate从数据库中查询数据后返回ResultSet</span></span><br><span class="line"><span class="string">&gt; &gt; 然后hibernate将ResultSet中的内容组装成对象（两个）</span></span><br><span class="line"><span class="string">&gt; &gt; 组装成两个对象，一个放入缓存中，一个放入快照中</span></span><br><span class="line"><span class="string">&gt; &gt; 然后把缓存对象返回给程序</span></span><br><span class="line"><span class="string">&gt; &gt; 如果程序修改了缓存对象，然后事务就提交到hibernate</span></span><br><span class="line"><span class="string">&gt; &gt; 然后hibernate会对比缓存对象和快照对象，如果有变化就会同步到数据库，没有就不变</span></span><br><span class="line"><span class="string">&gt; &gt;</span></span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><p>2.二级缓存（存在sessionFactory中）</p><p>分为：</p><blockquote><p>1&gt;类级别缓存区</p><blockquote><p>在二级缓存中，属性散列放置，获取时再重新组装。（依据：在两个session中获取的对象地址不同）</p></blockquote><p>2&gt;集合级别缓存</p><blockquote><p> 集合区存放的是集合元素的id，实体是在类级别缓存区（集合级别的缓存依赖类级别缓存）</p></blockquote><p>3&gt;更新时间缓存区</p><blockquote><p>一级缓存数据有更新时。同步更新二级缓存（通常情况下）<br>记录时间戳，比较时间记录戳，哪个时间戳离现在时间最近，依照此时间戳刷新缓存区的数据</p></blockquote><p>4&gt;查询缓存</p><blockquote><p>与query查询有关，优化query查询的缓存（又称三级缓存）</p></blockquote></blockquote></blockquote><h6 id="简谈hibernate性能的优化："><a href="#简谈hibernate性能的优化：" class="headerlink" title="简谈hibernate性能的优化："></a>简谈hibernate性能的优化：</h6><blockquote><p>使用数据库连接池如：C3P0、Druid、DBCP等</p><p>使用load延迟加载</p><p>利用hibernate的缓存机制</p><p>在分页展示时使用批量查询（batch-size=”查询个数”）</p><p>利用数据抓取策略优化hibernate性能：</p><blockquote><p>利用数据抓取策略具体：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&gt; &gt; &lt;1&gt;一对多(在set节点设置 fetch=“”，Lazy=“”)</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;    fetch：（控制sql语句的格式）</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;        join     生成左外连接查询（对Query方式无效）</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         select   生成多条sql语句</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         subSelect  生成子查询语句</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         Lazy：（控制SQL语句的执行时机，对query方式有效）</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         false   关闭延迟加载</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         true   开启延迟加载</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         extra   比延迟加载还延迟</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt; &lt;2&gt;多对一（在多的一方xml中，mang-to-one节点设置 fetch=“”，Lazy=“ ）</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;    fetch： 同上</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         Lazy：</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         false  关闭延迟加载</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         proxy</span></span><br><span class="line"><span class="string">&gt; &gt; </span></span><br><span class="line"><span class="string">&gt; &gt;         no-proxy                                     </span></span><br><span class="line"><span class="string">&gt; &gt;</span></span><br></pre></td></tr></table></figure></blockquote></blockquote><h6 id="hibernate中对象的三种状态："><a href="#hibernate中对象的三种状态：" class="headerlink" title="hibernate中对象的三种状态："></a>hibernate中对象的三种状态：</h6><table><thead><tr><th style="text-align:center">状态</th><th style="text-align:center">与session是否有关</th><th style="text-align:center">是否有oid(序列化id)</th></tr></thead><tbody><tr><td style="text-align:center">瞬时态</td><td style="text-align:center">无关</td><td style="text-align:center">没有oid</td></tr><tr><td style="text-align:center">持久态</td><td style="text-align:center">有关</td><td style="text-align:center">有oid</td></tr><tr><td style="text-align:center">游离态</td><td style="text-align:center">无关</td><td style="text-align:center">存在oid</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端框架 </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strtus2</title>
      <link href="/2019/03/01/%E6%A1%86%E6%9E%B6/Strtus2/"/>
      <url>/2019/03/01/%E6%A1%86%E6%9E%B6/Strtus2/</url>
      
        <content type="html"><![CDATA[<h4 id="Struts2简介："><a href="#Struts2简介：" class="headerlink" title="Struts2简介："></a>Struts2简介：</h4><h6 id="​1-概念：轻量级的MVC框架，主要解决请求分发的问题，重心在控制层和表现层。低侵入性，与业务代码的耦合度很低。"><a href="#​1-概念：轻量级的MVC框架，主要解决请求分发的问题，重心在控制层和表现层。低侵入性，与业务代码的耦合度很低。" class="headerlink" title="​1.概念：轻量级的MVC框架，主要解决请求分发的问题，重心在控制层和表现层。低侵入性，与业务代码的耦合度很低。"></a>​1.概念：轻量级的MVC框架，主要解决请求分发的问题，重心在控制层和表现层。低侵入性，与业务代码的耦合度很低。</h6><a id="more"></a><h6 id="2-Struts2特点："><a href="#2-Struts2特点：" class="headerlink" title="2.Struts2特点："></a>2.Struts2特点：</h6><ul><li>项目开源，扩张方便</li><li>提供Exception处理机制</li><li>Result方式的页面导航，通过Result标签很容易实现重定向和页面跳转</li><li>通过简单、集中的配置调度业务类，使得配置和修改都十分方便</li><li>提供简单、统一的表达式语言来访问所有可供访问的数据</li><li>提供标准、强大的验证框架和国际化框架</li><li>提供良好的Ajax支持</li><li>拥有简单的插件，只需要放入响应的jar包，任何人都可以扩展Struts2框架</li></ul><h6 id="3-与Servlet对比："><a href="#3-与Servlet对比：" class="headerlink" title="3.与Servlet对比："></a>3.与Servlet对比：</h6><p>​       优点：业务代码解耦，提高开发效率。</p><p>​        缺点：执行效率低，需要使用反射、解析XML等技术手段，结构复杂。</p><h4 id="Struts2的工作流程及流程图"><a href="#Struts2的工作流程及流程图" class="headerlink" title="Struts2的工作流程及流程图"></a>Struts2的工作流程及流程图</h4><h6 id="以下是Struts2的工作流程图"><a href="#以下是Struts2的工作流程图" class="headerlink" title="以下是Struts2的工作流程图"></a>以下是Struts2的工作流程图</h6><p><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551710253/JAVA-struts2/struts2.png" alt></p><h6 id="Struts2工作流程："><a href="#Struts2工作流程：" class="headerlink" title="Struts2工作流程："></a>Struts2工作流程：</h6><blockquote><p>1.客户端（Client）向Action发送一个请求（Request）</p><p>2.容器（Container）通过web.xml映射请求,并获取核心过滤器（StrutsPrepareAndExecuteFilter或FilterDispatcher）</p><p>3.容器（Container）调用核心过滤器，核心过滤器通过动作映射（ActionMapper）获得Action信息</p><p>4.然后核心过滤器（Controller）再调用动作类代理类（ActionProxy），由ActionProxy读取struts.xml文件获取Action和拦截器栈（Interceptor stack）的配置信息</p><p>5.ActionProxy把Request请求传递给调用者（ActionInvocation）</p><p>6.调用者（ActionInvocation)依次调用Action和拦截器（interceptor）,再根据Action的配置信息生成Result</p><p>7.Result信息返回给调用者（ActionInvocation），产生一个HttpServletResponse响应</p><p>8.产生的HTTPServletResponse响应发送给客户端，客户端上展示响应内容。</p></blockquote><h4 id="不同框架实现MVC的方式"><a href="#不同框架实现MVC的方式" class="headerlink" title="不同框架实现MVC的方式"></a>不同框架实现MVC的方式</h4><p>Servlet：</p><p><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551710051/JAVA-struts2/servlet.png" alt></p><p>Struts2:</p><p><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551710357/JAVA-struts2/struts2_1.png" alt></p><p>Spring:</p><p><img src="https://res.cloudinary.com/dumhmvszz/image/upload/v1551710058/JAVA-struts2/spring.png" alt></p><p><a href="https://xunmi.tk/2019/02/27/%E6%A1%86%E6%9E%B6/SpringMVC/" target="_blank" rel="noopener"><em>点击查看SpringMVC知识</em></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer、StringBuilder的特点和区别？</title>
      <link href="/2019/02/28/java%E5%9F%BA%E7%A1%80/String/"/>
      <url>/2019/02/28/java%E5%9F%BA%E7%A1%80/String/</url>
      
        <content type="html"><![CDATA[<p>String:</p><blockquote><p>对字符串进行对象的封装。被final关键字修饰<br>特点：字符串一旦被初始化，就不可以被改变，存放在方法区的常量池中。</p></blockquote><p>StringBuffer：</p><blockquote><p>构造一个不带字符串的字符串缓冲区，初始容量为16个字符。</p></blockquote><p>特点：</p><blockquote><p>可以对字符串内容进行修改<br>是一个容器<br>是可变长度的<br>缓冲区中可以存储任意类型的数据<br>最终需要变成字符串</p></blockquote><p>StringBuilder:</p><blockquote><p>JDK1.5开始出现，构造一个不带字符的字符串生成器，初始容量为16个字符。<br>特点：该类被用作StringBuffer的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况最常用）</p></blockquote><a id="more"></a><h4 id="StringBuffer和StringBuilder的区别："><a href="#StringBuffer和StringBuilder的区别：" class="headerlink" title="StringBuffer和StringBuilder的区别："></a>StringBuffer和StringBuilder的区别：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer线程安全，StringBuilder线程不安全（因为StringBuffer使用了Synchronized（同步锁）关键字）</span><br><span class="line">单线程操作，使用StringBUilder效率高，多线程操作，使用StringBuffer安全</span><br><span class="line">执行速度为：StringBuffer&gt;StringBuilder&gt;String</span><br></pre></td></tr></table></figure><p>三者使用场景：</p><blockquote><p>String：适合于少量的字符串操作的情况</p><p>StringBuffer：适用于多线程下在字符串缓冲区进行大量操作的情况</p><p>StringBuilder：适用于单线程下在字符串缓冲区进行大量操作的情况</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC的原理及执行流程</title>
      <link href="/2019/02/27/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
      <url>/2019/02/27/%E6%A1%86%E6%9E%B6/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h4 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc:"></a>springmvc:</h4><p> 其是一个基于MVC（Model View Controller）的web框架，SpringMVC是spring基础框架的一个模块，springMVC和spring无需通过中间整合层进行整合。</p><p>web请求处理流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户发送请求  到达前端控制器(DispatcherServlet)</span><br><span class="line">前端控制器根据请求信息（url）来请求处理器映射器（HandlerMapping）查找对应的处理器（Handler,平时也叫Controller），返回一个执行器链给前端控制器</span><br><span class="line">前端控制器调用处理器适配器(HandlerAdapter)去执行 处理器适配器调用相应的处理器进行执行</span><br><span class="line">处理器执行完成后给处理器适配器返回一个ModelAndView</span><br><span class="line">处理器适配器向前端控制器返回ModelAndView</span><br><span class="line">前端控制器在请求视图解析器(View resolver)进行视图解析，根据逻辑视图名解析成真正的视图（jsp）</span><br><span class="line">视图解析器向前端控制器返回view</span><br><span class="line">前端控制器进行视图渲染，视图渲染将模型数据填充到request域中</span><br><span class="line">前端控制器向用户响应结果</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="SpringMVC后端返回数据到前端页面方法总结："><a href="#SpringMVC后端返回数据到前端页面方法总结：" class="headerlink" title="SpringMVC后端返回数据到前端页面方法总结："></a>SpringMVC后端返回数据到前端页面方法总结：</h4><p>   SpringMVC返回数据到页面有几种不同的方式，他们各自适用的情况也不同。对于每种方式都给出Controller中的相应方法。</p><p>​    <code>首先是示例页面userAdd.jsp。它及时发出请求的页面，也是接收返回结果的页面。</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; contentType=&quot;text/html;charset=utf-8&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;添加用户信息4&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;user/add4.do&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    $&#123;personId &#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>1.通过request对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; @RequestMapping(&quot;/add&quot;)</span><br><span class="line">&gt; public String add(HttpServletRequest request)&#123;</span><br><span class="line">&gt;  request.setAttribute(&quot;personId&quot;,12);</span><br><span class="line">&gt;  return &quot;userAdd&quot;;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>2.通过ModelAndView对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; @RequestMapping(&quot;/add&quot;)</span><br><span class="line">&gt; public ModelAndView add()&#123;</span><br><span class="line">&gt;  ModelAndView mav = new ModelAndView(&quot;userAdd&quot;);</span><br><span class="line">&gt;  mav.addObject(&quot;personId&quot;, 12);</span><br><span class="line">&gt;  return mav;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>3.通过Model对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; @RequestMapping(&quot;/add&quot;)</span><br><span class="line">&gt; public String add(Model model)&#123;</span><br><span class="line">&gt;  model.addAttribute(&quot;personId&quot;, 12);</span><br><span class="line">&gt;  return &quot;userAdd&quot;;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>4.通过Map对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; @RequestMapping(&quot;/add&quot;)</span><br><span class="line">&gt; public String add(Map&lt;String,Object&gt; map)&#123;</span><br><span class="line">&gt;  map.put(&quot;personId&quot;, 12);</span><br><span class="line">&gt;  return &quot;userAdd&quot;;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
